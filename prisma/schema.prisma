// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Enquiry {
  id      Int     @id @default(autoincrement())
  name    String
  email   String?
  phone   String?
  subject String
  message String

  createdAt DateTime  @default(now())
  createdBy Int?
  updatedAt DateTime? @updatedAt
  updatedBy Int?
  deletedAt DateTime?
  deletedBy Int?
  deleted   Boolean   @default(false)

  // relation
  createdByUser User? @relation("EnquiryCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User? @relation("EnquiryUpdatedBy", fields: [updatedBy], references: [id])
  deletedByUser User? @relation("EnquiryDeletedBy", fields: [deletedBy], references: [id])
}

model Profile {
  id Int @id @default(autoincrement())

  bio              String  @db.VarChar(1000)
  profileImagePath String?
  email            String?
  githubUrl        String?
  linkedinUrl      String?

  createdAt DateTime  @default(now())
  createdBy Int?
  updatedAt DateTime? @updatedAt
  updatedBy Int?
  deletedAt DateTime?
  deletedBy Int?
  deleted   Boolean   @default(false)

  // relation
  createdByUser            User?                      @relation("ProfileCreatedBy", fields: [createdBy], references: [id])
  updatedByUser            User?                      @relation("ProfileUpdatedBy", fields: [updatedBy], references: [id])
  deletedByUser            User?                      @relation("ProfileDeletedBy", fields: [deletedBy], references: [id])
  MappingProfileTechnology MappingProfileTechnology[]
}

model Project {
  id Int @id @default(autoincrement())

  name        String
  description String?
  imagePath   String?
  githubUrl   String?
  projectUrl  String?

  createdAt DateTime  @default(now())
  createdBy Int?
  updatedAt DateTime? @updatedAt
  updatedBy Int?
  deletedAt DateTime?
  deletedBy Int?
  deleted   Boolean   @default(false)

  // relation
  createdByUser User? @relation("ProjectCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User? @relation("ProjectUpdatedBy", fields: [updatedBy], references: [id])
  deletedByUser User? @relation("ProjectDeletedBy", fields: [deletedBy], references: [id])

  MappingProjectTechnology MappingProjectTechnology[]
}

model Journey {
  id Int @id @default(autoincrement())

  title       String
  institution String
  description String  @db.VarChar(1000)
  startYear   Int
  endYear     Int?
  isCurrent   Boolean @default(false)

  createdAt DateTime  @default(now())
  createdBy Int?
  updatedAt DateTime? @updatedAt
  updatedBy Int?
  deletedAt DateTime?
  deletedBy Int?
  deleted   Boolean   @default(false)

  // relation
  createdByUser User? @relation("JourneyCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User? @relation("JourneyUpdatedBy", fields: [updatedBy], references: [id])
  deletedByUser User? @relation("JourneyDeletedBy", fields: [deletedBy], references: [id])
}

model MappingProfileTechnology {
  id Int @id @default(autoincrement())

  profileId    Int
  technologyId Int

  // relation
  profile    Profile    @relation(fields: [profileId], references: [id])
  technology Technology @relation(fields: [technologyId], references: [id])
}

model MappingProjectTechnology {
  id Int @id @default(autoincrement())

  projectId    Int
  technologyId Int

  // relation
  project    Project    @relation(fields: [projectId], references: [id])
  technology Technology @relation(fields: [technologyId], references: [id])
}

model Technology {
  id                       Int                        @id @default(autoincrement())
  name                     String
  color                    String
  MappingProfileTechnology MappingProfileTechnology[]
  MappingProjectTechnology MappingProjectTechnology[]
}

model User {
  id       Int    @id @default(autoincrement())
  name     String
  email    String
  password String

  createdAt DateTime  @default(now())
  createdBy Int?
  updatedAt DateTime? @updatedAt
  updatedBy Int?
  deletedAt DateTime?
  deletedBy Int?
  deleted   Boolean   @default(false)

  // relation
  createdByUser User? @relation("UserCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User? @relation("UserUpdatedBy", fields: [updatedBy], references: [id])
  deletedByUser User? @relation("UserDeletedBy", fields: [deletedBy], references: [id])

  usersCreated User[] @relation("UserCreatedBy")
  usersUpdated User[] @relation("UserUpdatedBy")
  usersDeleted User[] @relation("UserDeletedBy")

  enquiriesCreated Enquiry[] @relation("EnquiryCreatedBy")
  enquiriesUpdated Enquiry[] @relation("EnquiryUpdatedBy")
  enquiriesDeleted Enquiry[] @relation("EnquiryDeletedBy")

  profilesCreated Profile[] @relation("ProfileCreatedBy")
  profilesUpdated Profile[] @relation("ProfileUpdatedBy")
  profilesDeleted Profile[] @relation("ProfileDeletedBy")

  projectsCreated Project[] @relation("ProjectCreatedBy")
  projectsUpdated Project[] @relation("ProjectUpdatedBy")
  projectsDeleted Project[] @relation("ProjectDeletedBy")

  journeysCreated Journey[] @relation("JourneyCreatedBy")
  journeysUpdated Journey[] @relation("JourneyUpdatedBy")
  journeysDeleted Journey[] @relation("JourneyDeletedBy")
}
